package com.dev.intourist.presentation.ui.screen.authimport android.content.Contextimport android.util.Logimport android.widget.Toastimport androidx.credentials.CredentialManagerimport androidx.credentials.CustomCredentialimport androidx.credentials.GetCredentialRequestimport androidx.credentials.GetCredentialResponseimport androidx.credentials.exceptions.GetCredentialExceptionimport androidx.lifecycle.viewModelScopeimport com.dev.intourist.presentation.base.viewmodel.BaseViewModelimport com.google.android.libraries.identity.googleid.GetGoogleIdOptionimport com.google.android.libraries.identity.googleid.GoogleIdTokenCredentialimport com.google.android.libraries.identity.googleid.GoogleIdTokenParsingExceptionimport kotlinx.coroutines.launchclass AuthViewModel : BaseViewModel() {    fun googleSignInApp(context: Context) = viewModelScope.launch {    val credentialManager: CredentialManager = CredentialManager.create(context)        val googleIdOption: GetGoogleIdOption = GetGoogleIdOption.Builder()      .setFilterByAuthorizedAccounts(false)      .setServerClientId("96342439104-1maet21v9gqsbid4atgfno8vgo889j40.apps.googleusercontent.com")      .build()        val request: GetCredentialRequest = GetCredentialRequest.Builder().addCredentialOption(      googleIdOption    ).build()        try {      val result = credentialManager.getCredential(        request = request,        context = context,      )      handleSignIn(result, context)    } catch (e: GetCredentialException) {      //handleFailure(e)      Log.d("1111", "111111111")      e.printStackTrace()      Log.d("1111", "111111111")    }  }    private fun handleSignIn(result: GetCredentialResponse, context: Context) {    when (val credential = result.credential) {            is CustomCredential -> {        if (credential.type == GoogleIdTokenCredential.TYPE_GOOGLE_ID_TOKEN_CREDENTIAL) {          try {            val googleIdTokenCredential = GoogleIdTokenCredential              .createFrom(credential.data)                        val personToken = googleIdTokenCredential.idToken            val personId = googleIdTokenCredential.id            val displayName = googleIdTokenCredential.displayName            val personPhoto = googleIdTokenCredential.profilePictureUri                        Toast.makeText(context, displayName, Toast.LENGTH_SHORT).show()                        Log.d("google", displayName.toString())                      } catch (e: GoogleIdTokenParsingException) {            Log.e(              this.javaClass.name,              "Received an invalid google id token response",              e            )          }        } else {          Log.e(this.javaClass.name, "Unexpected type of credential")        }      }            else -> {        Log.e(this.javaClass.name, "Unexpectekkd type of credential")      }    }  }}