package com.dev.intourist.data.moduleimport com.dev.intourist.data.BuildConfig.BASE_URLimport com.dev.intourist.data.BuildConfig.BASE_URL2import com.dev.intourist.data.local.Prefimport com.dev.intourist.data.remote.service.ApiServiceimport com.jakewharton.retrofit2.adapter.kotlin.coroutines.CoroutineCallAdapterFactoryimport okhttp3.OkHttpClientimport okhttp3.logging.HttpLoggingInterceptorimport org.koin.dsl.moduleimport retrofit2.Retrofitimport retrofit2.converter.gson.GsonConverterFactoryimport java.util.concurrent.TimeUnitval retrofitModule = module {    factory { provideOkHttpClient(get()) }    single { provideRetrofit(get()) }}fun provideOkHttpClient(pref: Pref): OkHttpClient {    val token = pref.showToken()    val interceptor = HttpLoggingInterceptor()    interceptor.setLevel(HttpLoggingInterceptor.Level.BODY)    return OkHttpClient.Builder()        .writeTimeout(20, TimeUnit.SECONDS)        .readTimeout(20, TimeUnit.SECONDS)        .connectTimeout(20, TimeUnit.SECONDS)        .addInterceptor(interceptor)        .addInterceptor { chain ->            val request = chain.request()            val modifiedRequest = if (token != null) {                request.newBuilder()                    .addHeader("Authorization", "Bearer $token")                    .build()            } else {                request            }            chain.proceed(modifiedRequest)        }        .build()}fun provideRetrofit(okHttpClient: OkHttpClient) =    Retrofit.Builder()        .baseUrl(BASE_URL2)        .addConverterFactory(GsonConverterFactory.create())        .addCallAdapterFactory(CoroutineCallAdapterFactory())        .client(okHttpClient)        .build()        .create(ApiService::class.java)