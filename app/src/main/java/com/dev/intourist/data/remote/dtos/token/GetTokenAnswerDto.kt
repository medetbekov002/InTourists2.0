package com.dev.intourist.data.remote.dtos.tokenimport com.dev.intourist.data.local.mapper.DataMapperimport com.dev.intourist.domain.model.token.GetTokenAnswerModelimport com.dev.intourist.domain.model.token.GetTokenModelimport com.dev.intourist.domain.model.token.RefreshTokenAnswerModelimport com.dev.intourist.domain.model.token.RefreshTokenModelimport com.dev.intourist.domain.model.token.VerifyTokenAnswerModelimport com.dev.intourist.domain.model.token.VerifyTokenModeldata class GetTokenAnswerDto(    val refresh: String,    val access: String) : DataMapper<GetTokenAnswerModel> {    override fun toDomain() = GetTokenAnswerModel(refresh, access)}data class GetTokenDto(    val username: String,    val password: String)fun GetTokenModel.toGetTokenDto() = GetTokenDto(username, password)data class RefreshTokenDto(    val refresh: String)fun RefreshTokenModel.toRefreshTokenDto() = RefreshTokenDto(refresh)data class RefreshTokenAnswerDto(    val access: String) : DataMapper<RefreshTokenAnswerModel> {    override fun toDomain() = RefreshTokenAnswerModel(access)}data class VerifyTokenDto(    val token: String)fun VerifyTokenModel.toVerifyTokenDto() = VerifyTokenDto(token)data class VerifyTokenAnswerDto(    val detail: String?=null,    val code: String?=null) : DataMapper<VerifyTokenAnswerModel> {    override fun toDomain() = VerifyTokenAnswerModel(detail, code)}