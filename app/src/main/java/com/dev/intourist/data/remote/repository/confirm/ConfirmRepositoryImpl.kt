package com.dev.intourist.data.remote.repository.confirmimport com.dev.intourist.data.base.makeNetworkRequestimport com.dev.intourist.data.remote.dtos.confirm.toConfirmDtoimport com.dev.intourist.data.remote.dtos.confirm.toResendConfirmDtoimport com.dev.intourist.data.remote.dtos.recover.toRecoverDtoimport com.dev.intourist.data.remote.service.ApiServiceimport com.dev.intourist.domain.model.confirm.ConfirmAnswerModelimport com.dev.intourist.domain.model.confirm.ConfirmModelimport com.dev.intourist.domain.model.confirm.ResendConfirmModelimport com.dev.intourist.domain.model.recover.RecoverModelimport com.dev.intourist.domain.repository.confirm.ConfirmRepositoryimport kotlinx.coroutines.flow.Flow// пока что поставилabstract class ConfirmRepositoryImpl(private val apiService: ApiService): ConfirmRepository {//    override fun confirm(code: ConfirmModel): Flow<Either<String, ConfirmAnswerModel>> = makeNetworkRequest {//        apiService.confirm(code.toConfirmDto()).toDomain()//    }////    override fun resendConfirm(userName: ResendConfirmModel): Flow<Either<String, List<String>>> = makeNetworkRequest{//        apiService.resendConfirm(userName.toResendConfirmDto())//    }////    override fun resendRecover(email: RecoverModel): Flow<Either<String, List<String>>> = makeNetworkRequest{//        apiService.resendRecover(email.toRecoverDto())//    }}